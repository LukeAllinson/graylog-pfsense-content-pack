{
  "v": 1,
  "id": "a8abb6b2-52fb-430d-afe7-8dbaded684b7",
  "rev": 1,
  "name": "pfSense - filterlog, snort, syslog",
  "summary": "pfSense filterlog, snort and syslog log parsing",
  "description": "",
  "vendor": "Jake Stride - Fork by Luke Allinson",
  "url": "",
  "parameters": [],
  "entities": [
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "1caa2d8e-5327-4451-960d-2b84addf22a3",
      "data": {
        "title": {
          "@type": "string",
          "@value": "Port to Service Lookup"
        },
        "description": {
          "@type": "string",
          "@value": "Look Up Port Number to Service"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"Port to Service Lookup\"\nwhen\n    has_field(\"dst_port\") OR\n    has_field(\"src_port\")\nthen\n    let d = lookup(\"port-to-service-lookup\", to_string($message.dst_port));\n    set_field(\"dst_service\", to_string(d[\"value\"]));\n    \n    let s = lookup(\"port-to-service-lookup\", to_string($message.src_port));\n    set_field(\"src_service\", to_string(s[\"value\"]));\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "c8414064-0f9f-4d10-8ad2-2b30fcb997fb",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv6 UDP"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv6 UDP"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv6 UDP\"\nwhen\n    to_string(regex(\"^.*,(in|out),6,.*,UDP,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:class},%{DATA:flow_label},%{DATA:hop_limit},%{DATA:protocol},%{DATA:protocol_id},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:src_port},%{DATA:dst_port},%{DATA:data_length}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline",
        "version": "1"
      },
      "id": "0ee5d57a-8f3f-44ed-ab93-560c8bf5c4a3",
      "data": {
        "title": {
          "@type": "string",
          "@value": "Critical Notifications"
        },
        "description": {
          "@type": "string",
          "@value": ""
        },
        "source": {
          "@type": "string",
          "@value": "pipeline \"Critical Notifications\"\nstage 0 match either\nrule \"Remove from Critical Alerts\"\nend"
        },
        "connected_streams": [
          {
            "@type": "string",
            "@value": "57a34f41-c1bd-4c0b-8631-f4cdd3d0d874"
          }
        ]
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "stream",
        "version": "1"
      },
      "id": "fd923781-2710-4545-9d5f-553b788fcd85",
      "data": {
        "alarm_callbacks": [],
        "outputs": [],
        "remove_matches": {
          "@type": "boolean",
          "@value": true
        },
        "title": {
          "@type": "string",
          "@value": "pfSense / filterlog"
        },
        "stream_rules": [
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "application_name"
            },
            "value": {
              "@type": "string",
              "@value": "filterlog"
            },
            "inverted": {
              "@type": "boolean",
              "@value": false
            },
            "description": {
              "@type": "string",
              "@value": ""
            }
          },
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "source"
            },
            "value": {
              "@type": "string",
              "@value": "pfSense"
            },
            "inverted": {
              "@type": "boolean",
              "@value": false
            },
            "description": {
              "@type": "string",
              "@value": ""
            }
          }
        ],
        "alert_conditions": [],
        "matching_type": {
          "@type": "string",
          "@value": "AND"
        },
        "disabled": {
          "@type": "boolean",
          "@value": false
        },
        "description": {
          "@type": "string",
          "@value": "filterlog messages"
        },
        "default_stream": {
          "@type": "boolean",
          "@value": false
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "f9cdd987-3f7f-4bd8-b7be-86f9a03bc7a8",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: Check filterlog"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense: Check if Filterlog"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense: Check filterlog\"\nwhen\n    has_field(\"application_name\") AND\n    to_string($message.application_name) == \"filterlog\"\nthen\n    let m = regex_replace(\"(^filterlog: )\", to_string($message.message),\"\");\n    set_field(\"original_message\", to_string($message.message));\n    set_field(\"message\", to_string(m));\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "2972cb30-029b-4e20-8c7e-086245059f23",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP TStamp Reply"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP TStamp Reply"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP TStamp Reply\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,tstampreply,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:icmp_id},%{DATA:icmp_sequence},%{DATA:icmp_otime},%{DATA:icmp_rtime},%{DATA:icmp_ttime}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "d0e6711c-88bb-40c7-b594-b0bd4213c103",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Unreachable Protocol"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Unreachable Protocol"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP Unreachable Protocol\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,unreachproto,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:icmp_dst_ip},%{DATA:icmp_protocol_id}\", to_string($message.message));\n    set_fields(fm);\n    set_field(\"a\",to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,(request|reply),.*$\", to_string($message.message))));\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "lookup_adapter",
        "version": "1"
      },
      "id": "dad7a92f-aae2-4f76-96fa-a6a29f2a1263",
      "data": {
        "_scope": {
          "@type": "string",
          "@value": "DEFAULT"
        },
        "name": {
          "@type": "string",
          "@value": "service-ports"
        },
        "title": {
          "@type": "string",
          "@value": "Service Ports"
        },
        "description": {
          "@type": "string",
          "@value": "Port number to service name mappings"
        },
        "configuration": {
          "type": {
            "@type": "string",
            "@value": "csvfile"
          },
          "path": {
            "@type": "string",
            "@value": "/usr/share/graylog/data/config/service-names-port-numbers.csv"
          },
          "separator": {
            "@type": "string",
            "@value": ","
          },
          "quotechar": {
            "@type": "string",
            "@value": "\""
          },
          "key_column": {
            "@type": "string",
            "@value": "Port"
          },
          "value_column": {
            "@type": "string",
            "@value": "Service"
          },
          "check_interval": {
            "@type": "long",
            "@value": 60
          },
          "case_insensitive_lookup": {
            "@type": "boolean",
            "@value": false
          }
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "435a396a-6a35-42ca-80d9-338ab764bc36",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Default"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Default"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP Default\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,(?!(request|reply|unreachproto|unreachport|unreach|timexceed|paramprob|redirect|maskreply|needfrag|tstamp|tstampreply)),.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:icmp_description}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline",
        "version": "1"
      },
      "id": "16756247-badc-4f21-a291-ef942153066e",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: filterlog"
        },
        "description": {
          "@type": "string",
          "@value": ""
        },
        "source": {
          "@type": "string",
          "@value": "pipeline \"pfSense: filterlog\"\nstage 0 match either\nrule \"pfSense filterlog: IPv4 ICMP Echo\"\nrule \"pfSense filterlog: IPv4 ICMP Unreachable Protocol\"\nrule \"pfSense filterlog: IPv4 ICMP TStamp\"\nrule \"pfSense filterlog: IPv4 ICMP Need Frag\"\nrule \"pfSense filterlog: IPv4 ICMP Unreachable Port\"\nrule \"pfSense filterlog: IPv4 ICMP Default\"\nrule \"pfSense filterlog: IPv4 ICMP Unreachable Other\"\nrule \"pfSense filterlog: IPv4 ICMP TStamp Reply\"\nrule \"pfSense filterlog: IPv4 TCP\"\nrule \"pfSense filterlog: IPv6 TCP\"\nrule \"pfSense filterlog: IPv6 UDP\"\nrule \"pfSense filterlog: IPv4 UDP\"\nrule \"pfSense filterlog: IPv6 ICMP\"\nstage 1 match either\nrule \"Port to Service Lookup\"\nend"
        },
        "connected_streams": [
          {
            "@type": "string",
            "@value": "fd923781-2710-4545-9d5f-553b788fcd85"
          }
        ]
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "9c8d9b91-ee1d-481f-a410-9303c0982127",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Need Frag"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Need Frag"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP Need Frag\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,needfrag,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:icmp_dst_ip},%{DATA:imcp_mtu}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "2f685ff4-a654-4913-9b95-11b588abdf87",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv6 ICMP"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv6 ICMP"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv6 ICMP\"\nwhen\n    to_string(regex(\"^.*,(in|out),6,.*,ICMPv6,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:protocol},%{DATA:protocol_id},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:UNWANTED}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "ef1db5f1-597b-4b2a-8f04-69541e5e1fdb",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: Check Application"
        },
        "description": {
          "@type": "string",
          "@value": "Check the pfSense application name into the application field"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense: Check Application\"\nwhen\n    has_field(\"application_name\")\nthen\n    // Parse out barnyard2 prefix\n    let m = regex_replace(\"(^\\\\[[0-9]:[0-9]*:[0-9]\\\\] )\", to_string($message.message),\"\");\n    // Parse our 'application: '\n    let m = regex_replace(\"(^[a-z]-*: )\", to_string(m),\"\");\n    // Parse our 'application[number]: '\n    let m = regex_replace(\"(^[a-z]*\\\\[[0-9]*\\\\]: )\", to_string(m),\"\");\n    //let application = split(\"[^:]*\", to_string($message.message),1);\n    set_field(\"original_message\", to_string($message.message));\n    set_field(\"message\", to_string(m));\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "c3460b70-0c41-4085-8915-e67f58be1221",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: Parse php-cgi messages"
        },
        "description": {
          "@type": "string",
          "@value": "Parse PHP CGI messages"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense: Parse php-cgi messages\"\nwhen\n    to_string($message.application_name) == \"php-cgi\"\nthen\n    // Regex matches for system_gateways.php/: 96049/message\n    let a = regex(\"(php-cgi)(: )(.*?)(?=:)(: )(.*)\", to_string($message.message));\n    set_field(\"application_name\", a[\"0\"]);\n    set_field(\"original_message\", to_string($message.message));\n    set_field(\"message\", a[\"4\"]);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "57d08b66-840f-4296-a98c-829d8dd45411",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: Parse filterlog message"
        },
        "description": {
          "@type": "string",
          "@value": "Filterlog"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense: Parse filterlog message\"\nwhen\n    to_string($message.application_name) == \"filterlog\"\nthen\n    let fm = grok(\"%{DATA:ruleId},%{DATA:subruleId},%{DATA:anchor},%{BASE10NUM:tracker},%{DATA:src_interface},%{DATA:object_name},%{DATA:command},%{DATA:direction},%{BASE10NUM:iptype},%{DATA:offset},%{DATA:tos},%{DATA:ecn},%{BASE10NUM:duration},%{BASE10NUM:session},%{DATA:flags},%{BASE10NUM:protnum},%{DATA:protocol},%{BASE10NUM:size},%{IPV4:src_ip},%{IPV4:dst_ip},%{BASE10NUM:tcp_flags},%{BASE10NUM:sequence},%{BASE10NUM:ack}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline",
        "version": "1"
      },
      "id": "e0bb3859-a52d-4d71-91ea-bbb0f82500ba",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: snort"
        },
        "description": {
          "@type": "string",
          "@value": ""
        },
        "source": {
          "@type": "string",
          "@value": "pipeline \"pfSense: snort\"\nstage 0 match either\nrule \"pfSense: Check Application\"\nstage 1 match either\nrule \"pfSense: Parse Snort/Suricata Message\"\nend"
        },
        "connected_streams": [
          {
            "@type": "string",
            "@value": "cd9712ac-92bf-493a-8b74-0d06ce995beb"
          }
        ]
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "0f1b110d-f8b1-4e96-892e-0e3dd48f1e4c",
      "data": {
        "title": {
          "@type": "string",
          "@value": "Check from pfSense"
        },
        "description": {
          "@type": "string",
          "@value": "Set pfSense"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"Check from pfSense\"\nwhen\n    has_field(\"source\") AND ($message.source == \"pfSense\")\nthen\n    route_to_stream(\"pfSense\");\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "19da4684-d0f5-4314-b2cd-9f68de35b714",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Unreachable Other"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Unreachable Other"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP Unreachable Other\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,(unreach|timexceed|paramprob|redirect|maskreply),.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:icmp_description}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "81776f4c-83d1-4daf-97f1-cc8596bc57b4",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 UDP"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 UDP"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 UDP\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,udp,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:src_port},%{DATA:dst_port},%{DATA:data_length}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "stream",
        "version": "1"
      },
      "id": "cd9712ac-92bf-493a-8b74-0d06ce995beb",
      "data": {
        "alarm_callbacks": [],
        "outputs": [],
        "remove_matches": {
          "@type": "boolean",
          "@value": true
        },
        "title": {
          "@type": "string",
          "@value": "pfSense / snort"
        },
        "stream_rules": [
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "application_name"
            },
            "value": {
              "@type": "string",
              "@value": "snort"
            },
            "inverted": {
              "@type": "boolean",
              "@value": false
            },
            "description": {
              "@type": "string",
              "@value": ""
            }
          },
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "source"
            },
            "value": {
              "@type": "string",
              "@value": "pfSense"
            },
            "inverted": {
              "@type": "boolean",
              "@value": false
            },
            "description": {
              "@type": "string",
              "@value": ""
            }
          }
        ],
        "alert_conditions": [],
        "matching_type": {
          "@type": "string",
          "@value": "AND"
        },
        "disabled": {
          "@type": "boolean",
          "@value": false
        },
        "description": {
          "@type": "string",
          "@value": "snort messages"
        },
        "default_stream": {
          "@type": "boolean",
          "@value": false
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "input",
        "version": "1"
      },
      "id": "d9affcf1-689b-4ecd-8b6e-66c336fb3585",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense UDP"
        },
        "configuration": {
          "port": {
            "@type": "integer",
            "@value": 5442
          },
          "recv_buffer_size": {
            "@type": "integer",
            "@value": 262144
          },
          "force_rdns": {
            "@type": "boolean",
            "@value": false
          },
          "allow_override_date": {
            "@type": "boolean",
            "@value": true
          },
          "override_source": {
            "@type": "string",
            "@value": "pfSense"
          },
          "bind_address": {
            "@type": "string",
            "@value": "0.0.0.0"
          },
          "expand_structured_data": {
            "@type": "boolean",
            "@value": false
          },
          "store_full_message": {
            "@type": "boolean",
            "@value": false
          },
          "charset_name": {
            "@type": "string",
            "@value": "UTF-8"
          },
          "number_worker_threads": {
            "@type": "integer",
            "@value": 6
          }
        },
        "static_fields": {},
        "type": {
          "@type": "string",
          "@value": "org.graylog2.inputs.syslog.udp.SyslogUDPInput"
        },
        "global": {
          "@type": "boolean",
          "@value": true
        },
        "extractors": [
          {
            "target_field": {
              "@type": "string",
              "@value": "application_name"
            },
            "condition_value": {
              "@type": "string",
              "@value": "(^[a-z-]+).*"
            },
            "order": {
              "@type": "integer",
              "@value": 0
            },
            "converters": [],
            "configuration": {
              "regex_value": {
                "@type": "string",
                "@value": "(^[a-z-]+).*"
              }
            },
            "source_field": {
              "@type": "string",
              "@value": "message"
            },
            "title": {
              "@type": "string",
              "@value": "General Application Name Extractor"
            },
            "type": {
              "@type": "string",
              "@value": "REGEX"
            },
            "cursor_strategy": {
              "@type": "string",
              "@value": "COPY"
            },
            "condition_type": {
              "@type": "string",
              "@value": "REGEX"
            }
          }
        ]
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "778d56e6-68f3-442c-bed3-1e3b3eda79c6",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Unreachable Port"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Unreachable Port"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP Unreachable Port\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,unreachport,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:icmp_dst_ip},%{DATA:icmp_protocol_id},%{DATA:icmp_port}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline",
        "version": "1"
      },
      "id": "32ecff3a-020d-4752-bb2b-94a3d0269471",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: syslog"
        },
        "description": {
          "@type": "string",
          "@value": ""
        },
        "source": {
          "@type": "string",
          "@value": "pipeline \"pfSense: syslog\"\nstage 0 match either\nrule \"pfSense: Check Application\"\nstage 1 match either\nrule \"pfSense: Parse php-fpm messages\"\nrule \"pfSense: Parse php-cgi messages\"\nend"
        },
        "connected_streams": [
          {
            "@type": "string",
            "@value": "e5cc31d1-aaf7-4ee1-a898-26b2b9d10e2a"
          }
        ]
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "2f2e070e-25e0-44ab-93e8-ee92b1ad9793",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: Parse php-fpm messages"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense: Parse php-fpm components to set application name"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense: Parse php-fpm messages\"\nwhen\n    to_string($message.application_name) == \"php-fpm\"\nthen\n    // Regex matches for system_gateways.php/: 96049/message\n    let a = regex(\"(?<=\\\\/)(.*?)(?=:)(: [0-9]*)(.*)\", to_string($message.message));\n    set_field(\"application_name\", a[\"0\"]);\n    set_field(\"original_message\", to_string($message.message));\n    set_field(\"message\", a[\"2\"]);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "f93b451c-aaea-4cf6-a886-c3f581d455a8",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP TStamp"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP TStamp"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP TStamp\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,tstamp,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:imcp_id},%{DATA:icmp_sequence}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "fe1fd413-807e-478c-8869-4da93896e9f3",
      "data": {
        "title": {
          "@type": "string",
          "@value": "Remove from Critical Alerts"
        },
        "description": {
          "@type": "string",
          "@value": "Remove from critical if not needed for alerts"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"Remove from Critical Alerts\"\nwhen\n    contains(to_string($message.message), \"FRAG TTL expired i=\") OR\n    contains(to_string($message.message), \"Gateway, none 'available' for inet6, use the first one configured.\") OR\n    contains(to_string($message.message), \"Session timed out for user 'admin' from:\") OR\n    contains(to_string($message.message), \"Beginning configuration backup to https://acb.netgate.com/save\") OR\n    contains(to_string($message.message), \"End of configuration backup to https://acb.netgate.com/save (success).\") OR\n    to_string($message.application_name) == \"snort\"\nthen\n    set_field(\"skip_alert\", true);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "lookup_table",
        "version": "1"
      },
      "id": "aad02717-eb7f-4392-b963-3b023f28583e",
      "data": {
        "default_single_value_type": {
          "@type": "string",
          "@value": "NULL"
        },
        "cache_name": {
          "@type": "string",
          "@value": "b59b6438-a07c-4ea0-baf1-773a533c53ca"
        },
        "name": {
          "@type": "string",
          "@value": "port-to-service-lookup"
        },
        "default_multi_value_type": {
          "@type": "string",
          "@value": "NULL"
        },
        "default_multi_value": {
          "@type": "string",
          "@value": ""
        },
        "data_adapter_name": {
          "@type": "string",
          "@value": "dad7a92f-aae2-4f76-96fa-a6a29f2a1263"
        },
        "_scope": {
          "@type": "string",
          "@value": "DEFAULT"
        },
        "title": {
          "@type": "string",
          "@value": "Port to Service Lookup"
        },
        "default_single_value": {
          "@type": "string",
          "@value": ""
        },
        "description": {
          "@type": "string",
          "@value": "Port number to Service Name Lookup"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "f9112162-45ee-4845-bcbd-c57d2037df99",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense: Parse Snort/Suricata Message"
        },
        "description": {
          "@type": "string",
          "@value": ""
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense: Parse Snort/Suricata Message\"\nwhen\n    to_string($message.application_name) == \"suricata\" || to_string($message.application_name) == \"snort\"\nthen\n    // Set the message\n    let sm = regex(\"(.*) \\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\].*\\\\{\\\\S+\\\\}\\\\s\\\\S+:\\\\d+\\\\s->\\\\s\\\\S+:\\\\d+\", to_string($message.message));\n    set_field(concat(to_string($message.application_name), \"_message\"), to_string(sm[\"0\"]));\n    \n    // Set the classification\n    let sm = regex(\".*\\\\[Classification:(.+)\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\].*\\\\{\\\\S+\\\\}\\\\s\\\\S+:\\\\d+\\\\s->\\\\s\\\\S+:\\\\d+\", to_string($message.message));\n    set_field(concat(to_string($message.application_name), \"_classification\"), to_string(sm[\"0\"]));\n    \n    // Set the priority\n    let sm = regex(\".*\\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s(\\\\d)\\\\].*\\\\{\\\\S+\\\\}\\\\s\\\\S+:\\\\d+\\\\s->\\\\s\\\\S+:\\\\d+\", to_string($message.message));\n    set_field(concat(to_string($message.application_name), \"_priority\"), to_string(sm[\"0\"]));\n    \n    // Set the interface\n    let sm = regex(\".*\\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\]:\\\\s<(\\\\S+)>\\\\s\\\\{(\\\\S+)\\\\}\\\\s\\\\S+:\\\\d+\\\\s->\\\\s\\\\S+:\\\\d+\", to_string($message.message));\n    set_field(\"interface\", to_string(sm[\"0\"]));\n    \n    // Set the protocol\n    let sm = regex(\".*\\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\].*\\\\{(\\\\S+)\\\\}\\\\s\\\\S+:\\\\d+\\\\s->\\\\s\\\\S+:\\\\d+\", to_string($message.message));\n    set_field(concat(to_string($message.application_name), \"_protocol\"), to_string(sm[\"0\"]));\n    \n    // Set the Source IP\n    let sm = regex(\".*\\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\].*\\\\{\\\\S+\\\\}\\\\s(\\\\S+):\\\\d+\\\\s->\\\\s\\\\S+:\\\\d+\", to_string($message.message));\n    set_field(\"src_ip\", to_string(sm[\"0\"]));\n    \n    // Set the Source Port\n    let sm = regex(\".*\\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\].*\\\\{\\\\S+\\\\}\\\\s\\\\S+:(\\\\d+)\\\\s->\\\\s\\\\S+:\\\\d+\", to_string($message.message));\n    set_field(\"src_port\", to_string(sm[\"0\"]));\n    \n    // Set the Destination IP\n    let sm = regex(\".*\\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\].*\\\\{\\\\S+\\\\}\\\\s\\\\S+:\\\\d+\\\\s->\\\\s(\\\\S+):\\\\d+\", to_string($message.message));\n    set_field(\"dst_ip\", to_string(sm[\"0\"]));\n    \n    // Set the Destination Port\n    let sm = regex(\".*\\\\[Classification:.+\\\\]\\\\s\\\\[Priority:\\\\s\\\\d\\\\].*\\\\{\\\\S+\\\\}\\\\s\\\\S+:\\\\d+\\\\s->\\\\s\\\\S+:(\\\\d+)\", to_string($message.message));\n    set_field(\"dst_port\", to_string(sm[\"0\"]));\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "c755b865-af9d-4c2a-a304-578b34aa7857",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv6 TCP"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv6 TCP"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv6 TCP\"\nwhen\n    to_string(regex(\"^.*,(in|out),6,.*,TCP,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:class},%{DATA:flow_label},%{DATA:hope_limit},%{DATA:protocol},%{DATA:protocol_id},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:src_port},%{DATA:dst_port},%{DATA:data_length},%{DATA:tcp_flags},%{DATA:sequence},%{DATA:ack},%{DATA:window},%{DATA:urg},%{DATA:options}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "stream",
        "version": "1"
      },
      "id": "e5cc31d1-aaf7-4ee1-a898-26b2b9d10e2a",
      "data": {
        "alarm_callbacks": [],
        "outputs": [],
        "remove_matches": {
          "@type": "boolean",
          "@value": true
        },
        "title": {
          "@type": "string",
          "@value": "pfSense / syslog"
        },
        "stream_rules": [
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "application_name"
            },
            "value": {
              "@type": "string",
              "@value": "filterlog"
            },
            "inverted": {
              "@type": "boolean",
              "@value": true
            },
            "description": {
              "@type": "string",
              "@value": "Ignore filterlog messages"
            }
          },
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "application_name"
            },
            "value": {
              "@type": "string",
              "@value": "snort"
            },
            "inverted": {
              "@type": "boolean",
              "@value": true
            },
            "description": {
              "@type": "string",
              "@value": "Ignore snort messages"
            }
          },
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "source"
            },
            "value": {
              "@type": "string",
              "@value": "pfSense"
            },
            "inverted": {
              "@type": "boolean",
              "@value": false
            },
            "description": {
              "@type": "string",
              "@value": ""
            }
          }
        ],
        "alert_conditions": [],
        "matching_type": {
          "@type": "string",
          "@value": "AND"
        },
        "disabled": {
          "@type": "boolean",
          "@value": false
        },
        "description": {
          "@type": "string",
          "@value": "syslog messages"
        },
        "default_stream": {
          "@type": "boolean",
          "@value": false
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "cd52e348-4f54-4509-ac75-9ba6ead16d00",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Echo"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 ICMP Echo"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 ICMP Echo\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,icmp,.*,(request|reply),.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:icmp_type},%{DATA:icmp_id},%{DATA:icmp_sequence}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "pipeline_rule",
        "version": "1"
      },
      "id": "cb2c63d4-4042-4f18-b983-bbb12320fe85",
      "data": {
        "title": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 TCP"
        },
        "description": {
          "@type": "string",
          "@value": "pfSense filterlog: IPv4 TCP"
        },
        "source": {
          "@type": "string",
          "@value": "rule \"pfSense filterlog: IPv4 TCP\"\nwhen\n    to_string(regex(\"^.*,(in|out),4,.*,tcp,.*$\", to_string($message.message))) != \"{}\"\nthen\n    \n    let fm = grok(\"%{BASE10NUM:rule_number},%{DATA:subrule_number},%{DATA:anchor},%{DATA:tracker},%{DATA:interface},%{DATA:reason},%{DATA:action},%{DATA:direction},%{DATA:ip_version},%{DATA:tos},%{DATA:ecn},%{DATA:ttl},%{DATA:id},%{DATA:offset},%{DATA:flags},%{DATA:protocol_id},%{DATA:protocol},%{DATA:length},%{DATA:src_ip},%{DATA:dst_ip},%{DATA:src_port},%{DATA:dst_port},%{DATA:data_length},%{DATA:tcp_flags},%{DATA:sequence},%{DATA:ack},%{DATA:window},%{DATA:urg},%{DATA:options}\", to_string($message.message));\n    set_fields(fm);\nend"
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "lookup_cache",
        "version": "1"
      },
      "id": "b59b6438-a07c-4ea0-baf1-773a533c53ca",
      "data": {
        "_scope": {
          "@type": "string",
          "@value": "DEFAULT"
        },
        "name": {
          "@type": "string",
          "@value": "port-to-service-cache"
        },
        "title": {
          "@type": "string",
          "@value": "Port to Service Cache"
        },
        "description": {
          "@type": "string",
          "@value": "Cache of the CSV file"
        },
        "configuration": {
          "type": {
            "@type": "string",
            "@value": "guava_cache"
          },
          "max_size": {
            "@type": "integer",
            "@value": 1000
          },
          "expire_after_access": {
            "@type": "long",
            "@value": 120
          },
          "expire_after_access_unit": {
            "@type": "string",
            "@value": "SECONDS"
          },
          "expire_after_write": {
            "@type": "long",
            "@value": 0
          }
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    },
    {
      "v": "1",
      "type": {
        "name": "stream",
        "version": "1"
      },
      "id": "57a34f41-c1bd-4c0b-8631-f4cdd3d0d874",
      "data": {
        "alarm_callbacks": [],
        "outputs": [],
        "remove_matches": {
          "@type": "boolean",
          "@value": false
        },
        "title": {
          "@type": "string",
          "@value": "Critical Notifications"
        },
        "stream_rules": [
          {
            "type": {
              "@type": "string",
              "@value": "SMALLER"
            },
            "field": {
              "@type": "string",
              "@value": "level"
            },
            "value": {
              "@type": "string",
              "@value": "4"
            },
            "inverted": {
              "@type": "boolean",
              "@value": false
            },
            "description": {
              "@type": "string",
              "@value": ""
            }
          },
          {
            "type": {
              "@type": "string",
              "@value": "EXACT"
            },
            "field": {
              "@type": "string",
              "@value": "application_name"
            },
            "value": {
              "@type": "string",
              "@value": "suricata"
            },
            "inverted": {
              "@type": "boolean",
              "@value": true
            },
            "description": {
              "@type": "string",
              "@value": ""
            }
          }
        ],
        "alert_conditions": [],
        "matching_type": {
          "@type": "string",
          "@value": "AND"
        },
        "disabled": {
          "@type": "boolean",
          "@value": false
        },
        "description": {
          "@type": "string",
          "@value": "For things we want humans to review"
        },
        "default_stream": {
          "@type": "boolean",
          "@value": false
        }
      },
      "constraints": [
        {
          "type": "server-version",
          "version": ">=5.0.6+51f2df8"
        }
      ]
    }
  ]
}
